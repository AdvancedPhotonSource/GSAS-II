# file to implement git smudge and clean filters
# to enable calling of this file add a section to the .git/config like this:
#
#    [filter "createVersionFile"]
#       clean  = python git_filters.py --tag-version
#       smudge = python git_filters.py --record-version
#
# this is failing as somehow the file is getting overwritten, at least on clean
# but this routine does what it is supposed to do when it is called directly
#
import os
import sys
import datetime as dt
import git

# get location of the GSAS-II files
# assumed to be the parent of location of this file
path2GSAS2 = os.path.dirname(os.path.dirname(
    os.path.abspath(os.path.expanduser(__file__))))
# and the repo is in the parent of that
path2repo = os.path.dirname(path2GSAS2)

if __name__ == '__main__':
    print("don't use this. Replaced by tag-version.py")
    sys.exit()
    
    help = False
    actionName = None
    for arg in sys.argv[1:]:
        if '--record-version' in arg:   # records version info
            if actionName:
                print(f'previous option conflicts with {arg}')
                help = True
                break
            actionName = 'record'
        elif '--tag-version' in arg:   # records version info
            if actionName:
                print(f'previous option conflicts with {arg}')
                help = True
                break
            actionName = 'tag'
        elif '--help' in arg:
            help = True
            break
        else:
            print(f'unknown arg {arg}')
            help = True

    if help or len(sys.argv) == 1:
        print(f'''Options when running {sys.argv[0]}:

        --record-version           records version info into a file 
                                   that can be sourced to determine
                                   GSAS-II version info, when not 
                                   not available from git

        --tag-version              creates version number tags

''')
        sys.exit()

    # for debug, redirect output to a log file
    #sys.stderr = sys.stdout = open('/tmp/gitfilter.log','a')
    
    if actionName == 'record':
        # create a file with GSAS-II version infomation
        try:
            g2repo = git.Repo(path2repo)
        except:
            print('Launch of gitpython for version file failed'+
                      f' with path {path2repo}')
            sys.exit()
        commit = g2repo.head.commit
        ctim = commit.committed_datetime.strftime('%d-%b-%Y %H:%M')
        now = dt.datetime.now().replace(
            tzinfo=commit.committed_datetime.tzinfo)
        commit0 = commit.hexsha
        tags0 = g2repo.git.tag('--points-at',commit).split('\n')
        history = list(g2repo.iter_commits('HEAD'))
        for i in history[1:]:
            tags = g2repo.git.tag('--points-at',i)
            if not tags: continue
            commitm1 = i.hexsha
            tagsm1 = tags.split('\n')
            break
        pyfile = os.path.join(path2GSAS2,'git_verinfo.py')
        try:
            fp = open(pyfile,'w')
        except:
            print(f'Creation of git version file {pyfile} failed')
            sys.exit()
        fp.write('# -*- coding: utf-8 -*-\n')
        fp.write(f'# {os.path.split(pyfile)[1]} - GSAS-II version info from git\n')
        fp.write(f'# Do not edit, generated by {" ".join(sys.argv)!r} command\n')
        fp.write(f'# Created {now}\n\n')
        fp.write(f'git_version = {commit0!r}\n')
        if tags:
            fp.write(f'git_tags = {tags0}\n')
        else:
            fp.write('git_tags = []\n')
        fp.write(f'git_prevtaggedversion = {commitm1!r}\n')
        fp.write(f'git_prevtags = {tagsm1}\n')
        fp.close()
        print(f'Created git version file {pyfile} at {now} for {commit0[:6]!r}')
        sys.exit()

    elif actionName == 'tag':
        g2repo = git.Repo(path2repo)
        if g2repo.active_branch.name != 'master':
            print(f'Not on master branch {commit0[:6]!r}')
            sys.exit()
        if g2repo.head.is_detached: 
            print(f'Detached head {commit0[:6]!r}')
            sys.exit()
        # make a list of tags without a dash; get the largest numeric tag
        numtag = [i for i in g2repo.tags if '-' not in i.name]
        max_numeric = max([int(i.name) for i in numtag if i.name.isdecimal()])

        # scan for the newest untagged commits, stopping at the first
        # tagged one
        untagged = []
        for i,c in enumerate(g2repo.iter_commits('HEAD')):
            if i > 500:
                print('No tag found in 500 commits')
                #break
                sys.exit()
            tags = g2repo.git.tag('--points-at',c).split('\n')
            if tags == ['']:
                untagged.append(c)
            else:
                break
        # add a tag to the newest untagged version
        tagnum = max_numeric
        for i in sorted(untagged,key=lambda k:k.committed_datetime,reverse=True):
            tagnum += 1
            if str(tagnum) in g2repo.tags:
                print(f'Error: {tagnum} would be repeated')
                break
            g2repo.create_tag(str(tagnum),ref=i)
            print(f'created tag {tagnum} for {i.hexsha[:6]}')
            break

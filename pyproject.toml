[build-system]
build-backend = "mesonpy"
requires = ["meson-python",
    'ninja',
    'wheel',
    'Cython',
    'numpy',
    'pyproject-metadata>=0.5.0',
    'tomli>=1.0.0',
]


[project]
name = "GSAS-II"
version = "2.0.0"
authors = [
  { name = "Brian H. Toby", email = "toby@anl.gov" },
  { name = "Robert B. Von Dreele", email = "vondreele@anl.gov" },
]
description = "Structural analysis from neutron and x-ray diffraction"
readme = "README.md"
license.file = "LICENSE"
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "License :: Freely Distributable",
  "Operating System :: OS Independent",
  "Programming Language :: Fortran",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering",
]
keywords = ["diffraction", "crystallography", "diffraction",
	    "powder diffraction", "SAXS", "reflectometry","neutron diffraction",	     "Rietveld"]
dependencies = [
  "numpy",
  "scipy",
  "pycifrw",
]

[project.optional-dependencies]
gui = [
  "wxPython >=4.1",
  "matplotlib",
  "pyopengl",
]
misc = [
  "pillow",
  "h5py",
  "hdf5",
  "imageio",
  "pybaselines",
]
web = [
  "conda",
  "requests",
]
git = [
  "git",
  "gitpython",
]
docs = [
  "sphinx",
  "sphinx-rtd-theme",
]

[project.urls]
Homepage = "https://advancedphotonsource.github.io/GSAS-II-tutorials"
"Bug Tracker" = "https://github.com/AdvancedPhotonSource/GSAS-II/issues"
#Discussions = "https://github.com/AdvancedPhotonSource/GSAS-II/discussions"
#Changelog = "https://github.com/AdvancedPhotonSource/GSAS-II/releases"

#[project.scripts]
#spam-gui = "spam:main_gui"  # need to figure this out
#GSASII
#G2compare
#GSASIIIntPDFtool
#Absorb
#fprime
#PlotXNFF

[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-extras = ["test"]
test-skip = ["*universal2:arm64"]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["gsas_ii"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.10"
warn_unused_configs = true
strict = false
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "gsas_ii.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ["src"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "PT",       # flake8-pytest-style
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
]
extend-ignore = [
  "C408",     # using dict() is fine
  "EM101",    # string literals in error messages are fine, stop power tripping
  "ISC001",   # Conflicts with formatter
  "NPY002",   # allow the old numpy random generator
  "PIE804",   # creating dict to ** it is fine
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "RET504",   # do not complain about extra locals
  "RET505",   # return in else (clearer with the `else`)
  "SIM102",   # multi-term if clauses are not always clearer
  "SIM105",   # contextlib.suppress rather than try...except (just use language)
  "SIM108",   # ternaries are not actually clearer (just fewer lines)
]
unfixable = [
  "T20",  # Removes print statements
  "F841", # Removes unused variables
]
# isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["gsas_ii._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.10"
ignore-paths = [".*/_version.py"]
extension-pkg-allow-list = ["gsas_ii._core"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "missing-function-docstring",
  "wrong-import-position",
]

[project.gui-scripts]
GSAS-II = 'GSASII.GSASII:main'
